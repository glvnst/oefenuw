/* eslint-disable prettier/prettier */

// I'm not just indexing a string here because we may
// add the digraph "ij" in the near future. this would
// make letters.length == 27 and necessitate this more
// explicit array syntax

const letters = [
  "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
  "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"
];
/* eslint-enable prettier/prettier */

const voices = ["Ellen", "Claire", "Xander"];

// // eslint-disable-next-line prettier/prettier
// const goodPhrases = [
//   'dat_klopt',
//   'ja',
//   'prima',
//   'super'
// ]

// // eslint-disable-next-line prettier/prettier
// const badPhrases = [
//   'dat_klopt_niet',
//   'nee'
//   // 'probeer_het_nog_eens'
// ]

function randomlyVoicedLetter(letter) {
  return voicedLetter(randomChoice(voices), letter);
}

function randomlyVoicedPhrase(phrase) {
  return voicedPhrase(randomChoice(voices), phrase);
}

function voicedLetter(voice, letter) {
  return voice + "-letter-" + letter;
}

function voicedPhrase(voice, phrase) {
  const phrase_repr = phrase.toLowerCase().replace(/[^A-Za-z0-9_]+/g, "_");
  return voice + "-phrase-" + phrase_repr;
}

function randomChoice(arr) {
  const randIndex = Math.floor(Math.random() * arr.length);
  return arr[randIndex];
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function sleep(seconds) {
  return new Promise(function(resolve) {
    setTimeout(resolve, seconds * 1000);
  });
}

function loadHowlerConfig() {
  // this json file is generated by the audiosprite script whenever a new
  // audio file or utterance is added to the project
  const spriteData = require("../public/audio/sprites.json");

  let howlerConfig = {
    sprite: spriteData.sprite,
    src: new Array(),
    onplayerror(soundID, errorMessage) {
      // eslint-disable-next-line no-console
      console.log("howler playback error", soundID, errorMessage);
    }
  };

  // add the relative urls for the audio files
  for (const audioFileName of spriteData.urls) {
    howlerConfig.src.push("/audio/" + audioFileName);
  }

  return howlerConfig;
}

export default {
  letters,
  voices,
  randomChoice,
  voicedLetter,
  voicedPhrase,
  randomlyVoicedLetter,
  randomlyVoicedPhrase,
  shuffleArray,
  sleep,
  loadHowlerConfig
};
